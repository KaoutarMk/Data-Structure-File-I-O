package main;
import java.io.*;

public class OddonacciCalculator {
    // Linear Oddonacci calculator
    public static long linearOddonacci(int n) {
        if (n <= 3) {
            return 1;
        } else {
            return linearOddonacci(n-1) + linearOddonacci(n-2) + linearOddonacci(n-3);
        }
    }

    // Multiple Oddonacci calculator
    public static long multipleOddonacci(int n) {
        if (n <= 3) {
            return 1;
        } else {
            return multipleOddonacci(n-1) + multipleOddonacci(n-2) + multipleOddonacci(n-3);
        }
    }

    public static void main(String[] args) {
        BufferedWriter linearWriter = null;
        BufferedWriter multipleWriter = null;
        
        try {
            linearWriter = new BufferedWriter(new FileWriter("LinearOddoOut.txt"));
            multipleWriter = new BufferedWriter(new FileWriter("MultipleOddoOut.txt"));
            
            for (int i = 5; i <= 200; i += 5) {
                long linearStartTime = System.nanoTime();
                long linearResult = linearOddonacci(i);
                long linearEndTime = System.nanoTime();
                long linearDuration = (linearEndTime - linearStartTime) / 1000000; // Convert to milliseconds
                
                long multipleStartTime = System.nanoTime();
                long multipleResult = multipleOddonacci(i);
                long multipleEndTime = System.nanoTime();
                long multipleDuration = (multipleEndTime - multipleStartTime) / 1000000; // Convert to milliseconds
                
                linearWriter.write("Oddonacci(" + i + "): " + linearResult + ", Time: " + linearDuration + "ms\n");
                multipleWriter.write("Oddonacci(" + i + "): " + multipleResult + ", Time: " + multipleDuration + "ms\n");
            }
            
            // Flush and close the writers
            linearWriter.flush();
            multipleWriter.flush();
        } catch (IOException e) {
            System.err.println("Error writing to file: " + e.getMessage());
        } finally {
            try {
                if (linearWriter != null) {
                    linearWriter.close();
                }
                if (multipleWriter != null) {
                    multipleWriter.close();
                }
            } catch (IOException e) {
                System.err.println("Error closing file: " + e.getMessage());
            }
        }
    }
